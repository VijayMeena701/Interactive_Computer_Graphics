void cohenSutherlandLC(setforLine L)
{
    int x1orig = L.a[0], x2orig = L.b[0], y1orig = L.a[1], y2orig = L.b[1];
    int code1 = regionCode(L.a[0], L.a[1], L.viewingWindow[0][0], L.viewingWindow[0][1], L.viewingWindow[1][0], L.viewingWindow[1][1]);
    int code2 = regionCode(L.b[0], L.b[1], L.viewingWindow[0][0], L.viewingWindow[0][1], L.viewingWindow[1][0], L.viewingWindow[1][1]);
    int x, y;
    int accept = 0;
    int clipped = 0;
    while (1)
    {
        if ((code1 == 0) && (code2 == 0))
        {
            accept = 1;
            break;
        }
        else if ((code1 & code2) == 0)
        {
            clipped = 1;
            int code3 = 0;
            if (code1 != 0)
                code3 = code1;
            else if (code2 != 0)
                code3 = code2;

            if (code3 == 0)
                break;

            if (code3 & 8)
            {
                x = L.a[0] + (L.b[0] - L.a[0]) * (L.viewingWindow[1][1] - L.a[1]) / (L.b[1] - L.a[1]);
                y = L.viewingWindow[1][1];
            }
            else if (code3 & 4)
            {
                x = L.a[0] + (L.b[0] - L.a[0]) * (L.viewingWindow[0][1] - L.a[1]) / (L.b[1] - L.a[1]);
                y = L.viewingWindow[0][1];
            }
            else if (code3 & 2)
            {
                y = L.a[1] + (L.b[1] - L.a[1]) * (L.viewingWindow[1][0] - L.a[0]) / (L.b[0] - L.a[0]);
                x = L.viewingWindow[1][0];
            }
            else
            {
                y = L.a[1] + (L.b[1] - L.a[1]) * (L.viewingWindow[0][0] - L.a[0]) / (L.b[0] - L.a[0]);
                x = L.viewingWindow[0][0];
            }

            if (code3 == code1)
            {
                L.a[0] = x;
                L.a[1] = y;
                code1 = regionCode(L.a[0], L.a[1], L.viewingWindow[0][0], L.viewingWindow[0][1], L.viewingWindow[1][0], L.viewingWindow[1][1]);
            }
            else if (code3 == code2)
            {
                L.b[0] = x;
                L.b[1] = y;
                code2 = regionCode(L.b[0], L.b[1], L.viewingWindow[0][0], L.viewingWindow[0][1], L.viewingWindow[1][0], L.viewingWindow[1][1]);
            }
        }
        else
        {
            break;
        }
    }
    if (accept == 1)
    {
        glColor3f(0, 1, 0);
        glBegin(GL_LINES);
        glVertex2f(L.a[0], L.a[1]);
        glVertex2f(L.b[0], L.b[1]);
        glEnd();
        cout << "Line from Point: (" << L.a[0] << "," << L.a[1] << ") to Point (" << L.b[0] << "," << L.b[1] << ") is clipped if(either x or y value is changed)" << endl;
        cout << "Plotted Lines are from :" << L.a[0] << " " << L.a[1] << " to Point " << L.b[0] << " " << L.b[1] << endl;
    }
    if (accept == 1 && clipped == 1)
    {
        cout << "Line from Point: (" << x1orig << "," << y1orig << ") to Point (" << x2orig << "," << y2orig << ") was out of bounds and thus clipped" << endl;
        cout << "(" << L.viewingWindow[0][0] << "," << L.viewingWindow[0][1] << ") && (" << L.viewingWindow[1][0] << "," << L.viewingWindow[1][1] << ")";
        glColor3f(1, 0, 0);
        glBegin(GL_LINES);
        glVertex2f(x1orig, y1orig);
        glVertex2f(x2orig, y2orig);
        glEnd();
        glColor3f(1, 1, 0);
        glBegin(GL_LINES);
        glVertex2f(L.a[0], L.a[1]);
        glVertex2f(L.b[0], L.b[1]);
        glEnd();
        cout << "Line from Point: (" << L.a[0] << "," << L.a[1] << ") to Point (" << L.b[0] << "," << L.b[1] << ") is clipped" << endl;
        cout << "Plotted Lines are from :" << L.a[0] << " " << L.a[1] << " to Point " << L.b[0] << " " << L.b[1] << endl;
    }
    else
    {
        cout << "Line from Point: (" << L.a[0] << "," << L.a[1] << ") to Point (" << L.b[0] << "," << L.b[1] << ") is out of bounds" << endl;
        cout << "(" << L.viewingWindow[0][0] << "," << L.viewingWindow[0][1] << ") && (" << L.viewingWindow[1][0] << "," << L.viewingWindow[1][1] << ")";
        glColor3f(1, 0, 0);
        glBegin(GL_LINES);
        glVertex2f(L.a[0], L.a[1]);
        glVertex2f(L.b[0], L.b[1]);
        glEnd();
    }
}